**Role:** You are an AI Technical Analyst tasked with analyzing a given software project codebase to generate initial documentation for an AI Software Engineering Orchestrator named Roo (running in "Dan Mode").

**Context:**
Roo uses a structured memory bank stored in a `.roo-docs/` directory to maintain project context. This memory bank is the single source of truth. We need to create the initial baseline content for these files by inferring information from the existing codebase, README files, project configuration files (like package.json, pom.xml, requirements.txt, etc.), and any existing documentation within the repository.

**Input:**
The complete codebase and associated files for the project [Specify project name or source if applicable - Gemini needs access to this].

**Task:**
Analyze the provided codebase and generate the initial content for the following Markdown files within the `.roo-docs/` directory. Base the content on your analysis and inference from the project files. If information for a specific section cannot be reasonably inferred, state that clearly (e.g., "Could not infer from current codebase.").

**Output Requirements:**
Generate the content for each file separately. Use clear Markdown formatting. Be concise but comprehensive based *only* on the evidence within the repository.

---

**File 1: `.roo-docs/projectbrief.md`**

*   **Content:** Infer the primary goals and core requirements of the project. What does the software seem designed to *do* at a high level? Look for clues in READMEs, high-level comments, or entry point logic.
    *   Example Section: `## Core Goals & Requirements (Inferred)`

---

**File 2: `.roo-docs/productContext.md`**

*   **Content:** Infer *why* this project might exist. What problems does it seem to solve? Who might the target users be? What are the implied user experience goals (if any discernable)? Look for introductory sections in READMEs, documentation, or user-facing components.
    *   Example Sections: `## Problem Solved (Inferred)`, `## Target Users (Inferred)`, `## User Experience Goals (Implied)`

---

**File 3: `.roo-docs/systemPatterns.md`**

*   **Content:** Identify and describe the high-level system architecture, key components, and any obvious design patterns used. How are the major parts of the code organized? Are there clear client-server structures, microservices, monolithic patterns, specific data flow patterns, etc.? Analyze folder structures, dependencies between modules, and framework conventions.
    *   Example Sections: `## High-Level Architecture (Inferred)`, `## Key Components (Detected)`, `## Design Patterns (Observed)`

---

**File 4: `.roo-docs/techContext.md`**

*   **Content:** List the primary programming languages, frameworks, significant libraries, databases, external dependencies, and any major technical constraints detected. Analyze build files (package.json, pom.xml, etc.), import statements, configuration files, and Dockerfiles.
    *   Example Sections: `## Languages & Runtimes`, `## Frameworks`, `## Key Libraries & Dependencies`, `## Data Stores`, `## Technical Constraints (Observed)`

---

**File 5: `.roo-docs/activeContext.md`**

*   **Content:** State that this is the initial setup.
    *   Example Content: `## Active Context (Initial Setup)\n\n*   Initial analysis complete.\n*   No active changes or in-progress decisions noted at this time.`

---

**File 6: `.roo-docs/progress.md`**

*   **Content:** State the current status as the initial baseline.
    *   Example Sections: `## Current Status\n\nInitial baseline generated from codebase analysis.\n\n## Known Issues\n\nNone identified solely from initial code analysis.\n\n## Roadmap\n\nNo roadmap defined in initial analysis.`

---

**Final Instruction:** Present the content clearly labelled for each file path (`.roo-docs/projectbrief.md`, `.roo-docs/productContext.md`, etc.) so it can be easily saved into the respective files.